📁 Arborescence du projet

├── src
│   ├── lib
│   │   └── prisma.js
│   ├── middleware
│   │   ├── authMiddleware.js
│   │   └── errorMiddleware.js
│   ├── routes
│   │   ├── authRoutes.js
│   │   └── tournamentRoutes.js
│   └── index.js
├── .env
├── .gitignore
├── Dockerfile
├── package.json
├── schema.prisma
└── wait-for-it.sh

📄 Contenu des fichiers

.env:
```
DATABASE_URL="mysql://docker:docker@localhost:3306/gaming_tournaments"
JWT_SECRET="your-super-secret-key-change-in-production"
PORT=5000
```

.gitignore:
```
node_modules
```

Dockerfile:
```
FROM node:18-bullseye-slim
WORKDIR /app

RUN apt-get update && apt-get install -y libssl1.1 dos2unix

COPY package*.json ./
RUN npm install

COPY . .

# Convertir les fins de ligne CRLF -> LF
RUN dos2unix wait-for-it.sh
RUN chmod +x wait-for-it.sh

RUN npx prisma generate

EXPOSE 5000
CMD ["npm", "start"]

```

package.json:
```
{
  "name": "gaming-tournament-platform-backend",
  "version": "1.0.0",
  "type": "module",
  "scripts": {
    "dev": "nodemon src/index.js",
    "wait-db": "./wait-for-it.sh mariadb:3306 --timeout=30 -- echo \"Database is up\"",
    "db:push": "npx prisma db push",
    "start": "npm run wait-db && npm run db:push && node src/index.js"
  },
  "dependencies": {
    "@prisma/client": "^5.10.0",
    "bcryptjs": "^2.4.3",
    "chalk": "^5.4.1",
    "cors": "^2.8.5",
    "dotenv": "^16.4.5",
    "express": "^4.18.2",
    "express-async-handler": "^1.2.0",
    "inquirer": "^12.5.0",
    "jsonwebtoken": "^9.0.2",
    "zod": "^3.22.4"
  },
  "devDependencies": {
    "nodemon": "^3.0.3",
    "prisma": "^5.10.0"
  }
}

```

schema.prisma:
```
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(uuid())
  username      String       @unique
  email         String       @unique
  password      String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  tournaments   Tournament[] @relation("TournamentParticipants")
  organized     Tournament[] @relation("TournamentOrganizer")
}

model Tournament {
  id                String     @id @default(uuid())
  name             String
  game             String
  format           Format
  date             DateTime
  maxParticipants  Int
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  organizer        User       @relation("TournamentOrganizer", fields: [organizerId], references: [id])
  organizerId      String
  participants     User[]     @relation("TournamentParticipants")
}

enum Format {
  SOLO
  DUO
  TEAM
}
```

src\index.js:
```
import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import { errorHandler } from './middleware/errorMiddleware.js';
import authRoutes from './routes/authRoutes.js';
import tournamentRoutes from './routes/tournamentRoutes.js';

dotenv.config();

const app = express();
const port = process.env.PORT || 5000;

app.use(cors());
app.use(express.json());

// Routes
app.use('/api/auth', authRoutes);
app.use('/api/tournaments', tournamentRoutes);

// Error Handler
app.use(errorHandler);

app.listen(port, "0.0.0.0", () => {
  console.log(`Server running on port ${port}`);
});

```

src\lib\prisma.js:
```
import { PrismaClient } from '@prisma/client';

export const prisma = new PrismaClient();
```

src\middleware\authMiddleware.js:
```
import jwt from 'jsonwebtoken';
import { prisma } from '../lib/prisma.js';
import asyncHandler from 'express-async-handler';

export const protect = asyncHandler(async (req, res, next) => {
  let token;

  if (req.headers.authorization?.startsWith('Bearer')) {
    try {
      token = req.headers.authorization.split(' ')[1];
      const decoded = jwt.verify(token, process.env.JWT_SECRET);
      
      req.user = await prisma.user.findUnique({
        where: { id: decoded.id },
        select: { id: true, username: true, email: true }
      });

      next();
    } catch (error) {
      res.status(401);
      throw new Error('Not authorized, token failed');
    }
  }

  if (!token) {
    res.status(401);
    throw new Error('Not authorized, no token');
  }
});
```

src\middleware\errorMiddleware.js:
```
export const errorHandler = (err, req, res, next) => {
  const statusCode = res.statusCode === 200 ? 500 : res.statusCode;
  console.error(err); // Affiche le détail complet de l'erreur dans la console
  res.status(statusCode).json({
    message: err.message,
    stack: err.stack,
  });
};

```

src\routes\authRoutes.js:
```
import express from 'express';
import asyncHandler from 'express-async-handler';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import { prisma } from '../lib/prisma.js';

const router = express.Router();

// Register
router.post('/register', asyncHandler(async (req, res) => {
  const { username, email, password } = req.body;

  const userExists = await prisma.user.findFirst({
    where: {
      OR: [
        { email },
        { username }
      ]
    }
  });

  if (userExists) {
    res.status(400);
    throw new Error('User already exists');
  }

  const hashedPassword = await bcrypt.hash(password, 10);

  const user = await prisma.user.create({
    data: {
      username,
      email,
      password: hashedPassword,
    },
    select: {
      id: true,
      username: true,
      email: true,
    }
  });

  const token = jwt.sign({ id: user.id }, process.env.JWT_SECRET, {
    expiresIn: '30d',
  });

  res.status(201).json({
    user,
    token,
  });
}));

// Login
router.post('/login', asyncHandler(async (req, res) => {
  const { email, password } = req.body;

  const user = await prisma.user.findUnique({
    where: { email }
  });

  if (user && (await bcrypt.compare(password, user.password))) {
    res.json({
      user: {
        id: user.id,
        username: user.username,
        email: user.email,
      },
      token: jwt.sign({ id: user.id }, process.env.JWT_SECRET, {
        expiresIn: '30d',
      }),
    });
  } else {
    res.status(401);
    throw new Error('Invalid email or password');
  }
}));

export default router;
```

src\routes\tournamentRoutes.js:
```
import express from 'express';
import asyncHandler from 'express-async-handler';
import { protect } from '../middleware/authMiddleware.js';
import { prisma } from '../lib/prisma.js';

const router = express.Router();

// Get all tournaments
router.get('/', asyncHandler(async (req, res) => {
  const tournaments = await prisma.tournament.findMany({
    include: {
      organizer: {
        select: {
          id: true,
          username: true,
          email: true,
        }
      },
      participants: {
        select: {
          id: true,
          username: true,
          email: true,
        }
      }
    }
  });
  res.json(tournaments);
}));

// Create tournament
router.post('/', protect, asyncHandler(async (req, res) => {
  const { name, game, format, date, maxParticipants } = req.body;

  const tournament = await prisma.tournament.create({
    data: {
      name,
      game,
      format,
      date: new Date(date),
      maxParticipants,
      organizerId: req.user.id,
    },
    include: {
      organizer: {
        select: {
          id: true,
          username: true,
          email: true,
        }
      },
      participants: {
        select: {
          id: true,
          username: true,
          email: true,
        }
      }
    }
  });

  res.status(201).json(tournament);
}));

// Join tournament
router.post('/:id/join', protect, asyncHandler(async (req, res) => {
  const tournamentId = req.params.id;

  const tournament = await prisma.tournament.update({
    where: { id: tournamentId },
    data: {
      participants: {
        connect: { id: req.user.id }
      }
    },
    include: {
      organizer: {
        select: {
          id: true,
          username: true,
          email: true,
        }
      },
      participants: {
        select: {
          id: true,
          username: true,
          email: true,
        }
      }
    }
  });

  res.json(tournament);
}));

// Leave tournament
router.post('/:id/leave', protect, asyncHandler(async (req, res) => {
  const tournamentId = req.params.id;

  const tournament = await prisma.tournament.update({
    where: { id: tournamentId },
    data: {
      participants: {
        disconnect: { id: req.user.id }
      }
    },
    include: {
      organizer: {
        select: {
          id: true,
          username: true,
          email: true,
        }
      },
      participants: {
        select: {
          id: true,
          username: true,
          email: true,
        }
      }
    }
  });

  res.json(tournament);
}));

export default router;
```

wait-for-it.sh:
```
#!/usr/bin/env bash
# Use this script to test if a given TCP host/port are available

WAITFORIT_cmdname=${0##*/}

echoerr() { if [[ $WAITFORIT_QUIET -ne 1 ]]; then echo "$@" 1>&2; fi }

usage()
{
    cat << USAGE >&2
Usage:
    $WAITFORIT_cmdname host:port [-s] [-t timeout] [-- command args]
    -h HOST | --host=HOST       Host or IP under test
    -p PORT | --port=PORT       TCP port under test
                                Alternatively, you specify the host and port as host:port
    -s | --strict               Only execute subcommand if the test succeeds
    -q | --quiet                Don't output any status messages
    -t TIMEOUT | --timeout=TIMEOUT
                                Timeout in seconds, zero for no timeout
    -- COMMAND ARGS             Execute command with args after the test finishes
USAGE
    exit 1
}

wait_for()
{
    if [[ $WAITFORIT_TIMEOUT -gt 0 ]]; then
        echoerr "$WAITFORIT_cmdname: waiting $WAITFORIT_TIMEOUT seconds for $WAITFORIT_HOST:$WAITFORIT_PORT"
    else
        echoerr "$WAITFORIT_cmdname: waiting for $WAITFORIT_HOST:$WAITFORIT_PORT without a timeout"
    fi
    WAITFORIT_start_ts=$(date +%s)
    while :
    do
        if [[ $WAITFORIT_ISBUSY -eq 1 ]]; then
            nc -z $WAITFORIT_HOST $WAITFORIT_PORT
            WAITFORIT_result=$?
        else
            (echo -n > /dev/tcp/$WAITFORIT_HOST/$WAITFORIT_PORT) >/dev/null 2>&1
            WAITFORIT_result=$?
        fi
        if [[ $WAITFORIT_result -eq 0 ]]; then
            WAITFORIT_end_ts=$(date +%s)
            echoerr "$WAITFORIT_cmdname: $WAITFORIT_HOST:$WAITFORIT_PORT is available after $((WAITFORIT_end_ts - WAITFORIT_start_ts)) seconds"
            break
        fi
        sleep 1
    done
    return $WAITFORIT_result
}

wait_for_wrapper()
{
    # In order to support SIGINT during timeout: http://unix.stackexchange.com/a/57692
    if [[ $WAITFORIT_QUIET -eq 1 ]]; then
        timeout $WAITFORIT_BUSYTIMEFLAG $WAITFORIT_TIMEOUT $0 --quiet --child --host=$WAITFORIT_HOST --port=$WAITFORIT_PORT --timeout=$WAITFORIT_TIMEOUT &
    else
        timeout $WAITFORIT_BUSYTIMEFLAG $WAITFORIT_TIMEOUT $0 --child --host=$WAITFORIT_HOST --port=$WAITFORIT_PORT --timeout=$WAITFORIT_TIMEOUT &
    fi
    WAITFORIT_PID=$!
    trap "kill -INT -$WAITFORIT_PID" INT
    wait $WAITFORIT_PID
    WAITFORIT_RESULT=$?
    if [[ $WAITFORIT_RESULT -ne 0 ]]; then
        echoerr "$WAITFORIT_cmdname: timeout occurred after waiting $WAITFORIT_TIMEOUT seconds for $WAITFORIT_HOST:$WAITFORIT_PORT"
    fi
    return $WAITFORIT_RESULT
}

# process arguments
while [[ $# -gt 0 ]]
do
    case "$1" in
        *:* )
        WAITFORIT_hostport=(${1//:/ })
        WAITFORIT_HOST=${WAITFORIT_hostport[0]}
        WAITFORIT_PORT=${WAITFORIT_hostport[1]}
        shift 1
        ;;
        --child)
        WAITFORIT_CHILD=1
        shift 1
        ;;
        -q | --quiet)
        WAITFORIT_QUIET=1
        shift 1
        ;;
        -s | --strict)
        WAITFORIT_STRICT=1
        shift 1
        ;;
        -h)
        WAITFORIT_HOST="$2"
        if [[ $WAITFORIT_HOST == "" ]]; then break; fi
        shift 2
        ;;
        --host=*)
        WAITFORIT_HOST="${1#*=}"
        shift 1
        ;;
        -p)
        WAITFORIT_PORT="$2"
        if [[ $WAITFORIT_PORT == "" ]]; then break; fi
        shift 2
        ;;
        --port=*)
        WAITFORIT_PORT="${1#*=}"
        shift 1
        ;;
        -t)
        WAITFORIT_TIMEOUT="$2"
        if [[ $WAITFORIT_TIMEOUT == "" ]]; then break; fi
        shift 2
        ;;
        --timeout=*)
        WAITFORIT_TIMEOUT="${1#*=}"
        shift 1
        ;;
        --)
        shift
        WAITFORIT_CLI=("$@")
        break
        ;;
        --help)
        usage
        ;;
        *)
        echoerr "Unknown argument: $1"
        usage
        ;;
    esac
done

if [[ "$WAITFORIT_HOST" == "" || "$WAITFORIT_PORT" == "" ]]; then
    echoerr "Error: you need to provide a host and port to test."
    usage
fi

WAITFORIT_TIMEOUT=${WAITFORIT_TIMEOUT:-15}
WAITFORIT_STRICT=${WAITFORIT_STRICT:-0}
WAITFORIT_CHILD=${WAITFORIT_CHILD:-0}
WAITFORIT_QUIET=${WAITFORIT_QUIET:-0}

# Check to see if timeout is from busybox?
WAITFORIT_TIMEOUT_PATH=$(type -p timeout)
WAITFORIT_TIMEOUT_PATH=$(realpath $WAITFORIT_TIMEOUT_PATH 2>/dev/null || readlink -f $WAITFORIT_TIMEOUT_PATH)

WAITFORIT_BUSYTIMEFLAG=""
if [[ $WAITFORIT_TIMEOUT_PATH =~ "busybox" ]]; then
    WAITFORIT_ISBUSY=1
    # Check if busybox timeout uses -t flag
    # (recent Alpine versions don't support -t anymore)
    if timeout &>/dev/stdout | grep -q -e '-t '; then
        WAITFORIT_BUSYTIMEFLAG="-t"
    fi
else
    WAITFORIT_ISBUSY=0
fi

if [[ $WAITFORIT_CHILD -gt 0 ]]; then
    wait_for
    WAITFORIT_RESULT=$?
    exit $WAITFORIT_RESULT
else
    if [[ $WAITFORIT_TIMEOUT -gt 0 ]]; then
        wait_for_wrapper
        WAITFORIT_RESULT=$?
    else
        wait_for
        WAITFORIT_RESULT=$?
    fi
fi

if [[ $WAITFORIT_CLI != "" ]]; then
    if [[ $WAITFORIT_RESULT -ne 0 && $WAITFORIT_STRICT -eq 1 ]]; then
        echoerr "$WAITFORIT_cmdname: strict mode, refusing to execute subprocess"
        exit $WAITFORIT_RESULT
    fi
    exec "${WAITFORIT_CLI[@]}"
else
    exit $WAITFORIT_RESULT
fi
```

